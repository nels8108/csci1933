package p1;

import java.util.Scanner; 
import java.io.PrintWriter;
import java.io.File;



public class ContactList {
	private int ptr = -1;
	private Contact[] contactArray;
	private int addIterator=-1;
	PrintWriter p = null;
	Scanner s = new Scanner(System.in);
	
	public boolean add(Contact a){
		if (addIterator < contactArray.length-1){
			this.ptr++;
			this.addIterator++;
			
			
			contactArray[this.addIterator] = a;
			return true;
		}
		else
			return false;
		
		
		
	}
	public void setptr(int ptr){
		this.ptr = ptr;
	}
	public int getptr(){
		return this.ptr;
	}
	public void setContact(Contact[] people){
		this.contactArray = people;
	}
	public Contact[] getContact(){
		return this.contactArray;
	}
	public Contact find(String a){
		boolean firstTry = true;
		for(int i = 0; i < contactArray.length ; i++){
			if (contactArray[i].getName().contains(a)){
				this.ptr = i;
				firstTry = false;
				return contactArray[i];
			}
				
		}
		if (firstTry = true)
			this.ptr = 0;
			for(int i = 0; i < contactArray.length ; i++){
				if (contactArray[i].getName().contains(a)){
					this.ptr = i;
					return contactArray[i];
				}
					
			}
			
		return null;
	}
	public Contact remove(){
		Contact temp = this.contactArray[ptr];
		this.contactArray[ptr] = null;
		return temp;
	}
	public ContactList(){
		contactArray = new Contact[20];
		
	}
	public ContactList(int length){
		contactArray = new Contact[length];
	}
	public int getLength(){
		return this.contactArray.length;
	}
	
	public static void main(String[] args){
		Contact n = new Contact("neil", 34354, "555 one way", "super awesome");
		Contact c = new Contact("charles", 45613, "bamf", "has a pirate ship");
		Contact m = new Contact("Charb", 34354, "165132 dsadsa", "this wont compare!");
		ContactList lonng = new ContactList();
		ContactList sshort = new ContactList(2);
		/*System.out.println(lonng.add(n));
		System.out.println(lonng.add(c));
		System.out.println(lonng.add(m));*/
		System.out.println(sshort.getLength());
		System.out.println(sshort.add(n));
		System.out.println(sshort.add(c));
		System.out.println(sshort.add(m));
		System.out.println(sshort.find("charles").toString());
		System.out.println(sshort.remove());
		System.out.println("I am now writing");
		sshort.write("data.txt");
		System.out.println("I am now reading");
		sshort.read("data.txt");
		// next
		System.out.println("print out next");
		for(int i = 0; i<2 ; i++){
			System.out.println(sshort.next());
		}
		//previous
		System.out.println("print out nprev");
		for(int i = 0; i<2 ; i++){
			System.out.println(sshort.previous());
		}
		//Bubble
		System.out.println("bubble");
		sshort.sort();
		for(int i=0; i<sshort.getContact().length; i++){
			System.out.println(sshort.getContact()[i]);
		}
		
		
	}
	public boolean write(String filename){
		try {   // test for Exception in call to File constructor
			p = new PrintWriter(new File(filename));
			for(int i = 0; i<this.getContact().length; i++){
				if (this.getContact()[i] != null){
					p.println(this.getContact()[i].toString());
				}
			}
			p.close();
			}
			catch (Exception e) {
				System.out.println("Wrong Mane");
			}
		return true;
	}
	public boolean read(String filename){
		try {   // test for Exception in call to File constructor
			s = new Scanner(new File(filename));
			String line = s.nextLine();
			System.out.println(line);
			while(s.hasNextLine() == true){
				line = s.nextLine();
				System.out.println(line);
				
			}
			}   // end try block for File usage
			catch (Exception e) {
				System.out.println("Wrong Read Mane");
			}
		return true;
	}
	public Contact getCurrent(){
		return this.getContact()[ptr];
	}
	public Contact get(int n){
		//if the list is empty return null
		if (this.getContact()[n] == null){
			return null;
		}
		//else return the contact at n
		else{
			return this.getContact()[n];
		}
	}
	public Contact next(){
		//increase ptr
		if (this.getptr() == this.getContact().length-1){
			this.setptr(0);
		}
		else{
			ptr++;
		}
		return this.getContact()[ptr];
	}
	public Contact previous(){
		//dec ptr
		if (this.getptr() == 0){
			this.setptr(this.getContact().length-1);
		}
		else{
			ptr--;
		}
		return this.getContact()[ptr];
	}
	public void sort(){
		int i = 0;
		int j = 0;
		Contact temp = null;
		for (i=0; i<this.getContact().length; i++){
			for(j = 1; j < this.getContact().length - i; j++){
				if(this.getContact()[j] != null){
					if(this.getContact()[i].getName().compareTo(this.getContact()[j-1].getName()) < 0){
						temp = this.getContact()[j];
						this.getContact()[j] = this.getContact()[j-1];
						this.getContact()[j-1] = temp;
					}
				}
			}
		}
	}
}
