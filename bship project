//Neil Nelson 4646143 nels8108  Charbel Estephan estep021@umn.edu
import java.util.Scanner;
import java.util.Arrays;
public class BattleShipBoard {
	private String[][] bShipBoard;
	private int hits;
	private int misses;
	private int redundantStrikes;
	private boolean debug = false;
	private int rowLength;
	private int colLength;
	private int ships;
	private int mines;


	
	public void setTopEdge(){ //sets the top edge of the board to "te" which stands for top edge, excludes the corners
		for(int i = 1;i<this.colLength;i++){
			this.setBShipBoard(0, i, "te");
		}
	}
	public void setLeftEdge(){ //sets the left edge of the board to "le" which stands for left edge, excludes the corners
		for(int i = 1;i<this.rowLength;i++){
			this.setBShipBoard(i, 0, "le");
		}
	}
	public void setRightEdge(){
		for(int i = 1 ;i<this.rowLength;i++){ // sets the right edge
			this.setBShipBoard(i,this.colLength, "re");
		}
	}
	public void setBottomEdge(){
		for(int i =1;  i<this.colLength;i++){ //sets the bottom edge
			this.setBShipBoard(this.rowLength, i , "be");
		}
	}
	public void setRowLength(){
		this.rowLength = (this.bShipBoard.length)-1;
	}
	public void setColLength(){
		this.colLength = (this.bShipBoard[0].length)-1;
		
	}
	public void setBShipBoard(int row, int col, String info){
		this.bShipBoard[row][col] = info;
	}
	public void setCorners(){  // sets all the corners as "c" so we can build a case later that doesn't allow for placing a ship there
		this.setBShipBoard(0,0,"c");
		this.setBShipBoard(0, this.colLength, "c");
		this.setBShipBoard(this.rowLength, 0, "c");
		this.setBShipBoard(this.rowLength, this.colLength, "c");
		
	}
	public void placeShip(){
		boolean coordsWork = false;
		while( coordsWork == false){
			int midY = (int)Math.floor(Math.random() * (this.rowLength+1));  //rando coords
			int midX = (int)Math.floor(Math.random() * (this.colLength+1));
			double verticalOrHorizontalDouble = Math.random();  // deciding randomly whether it should be horizontal or vertical, if this doesn't work, it reloops and chooses another combination
			String verticalOrHorizontal;
			if(verticalOrHorizontalDouble > 0.5 ){
				verticalOrHorizontal = "V";}
			else{
				verticalOrHorizontal = "H";
			}	
			if(this.bShipBoard[midY][midX].equalsIgnoreCase("n") == true){ //"n" case
				if(this.checkForCollisions(midY, midX, verticalOrHorizontal) == false){
					if(verticalOrHorizontal.equalsIgnoreCase("H") == true){//horizontal placement
						this.setBShipBoard(midY, midX, "s");
						this.setBShipBoard(midY, midX+1, "s");
						this.setBShipBoard(midY, midX-1, "s");
						coordsWork=true;
					}
					else if(verticalOrHorizontal.equalsIgnoreCase("V") == true){ // vertical placement
						this.setBShipBoard(midY, midX, "s");
						this.setBShipBoard(midY+1, midX, "s");
						this.setBShipBoard(midY-1, midX, "s");
						coordsWork=true;
					}
				}
			}
			else if(this.bShipBoard[midY][midX] == "c"){// corner case
				//do nothing, wait for re-loop, can't place ship in corners
			}
			else if(this.bShipBoard[midY][midX] == "te" || this.bShipBoard[midY][midX] == "be"){ // top or bottom, can only be horizontal
				verticalOrHorizontal = "H";
				if(this.checkForCollisions(midY, midX, verticalOrHorizontal) == false){ // horizontal placement
					this.setBShipBoard(midY, midX, "s");
					this.setBShipBoard(midY, midX+1, "s");
					this.setBShipBoard(midY, midX-1, "s");
					coordsWork=true;
				}
			}
			else if(this.bShipBoard[midY][midX] == "le" || this.bShipBoard[midY][midX] == "re"){ //left or right, can only be vertical
				verticalOrHorizontal = "V";
				if(this.checkForCollisions(midY, midX, verticalOrHorizontal) == false){ //vertical placement
					this.setBShipBoard(midY, midX, "s");
					this.setBShipBoard(midY+1, midX, "s");
					this.setBShipBoard(midY-1, midX, "s");
					coordsWork=true;
				}
			}
			
			else if(this.bShipBoard[midY][midX] == "s"){//ship already there
				//do nothing, wait for re-loop
			}
			
	}
	}
	
	public void placeMine(){
		boolean minecoordsWork = false;
		while( minecoordsWork == false){
			int midY = (int)Math.floor(Math.random() * this.rowLength+1);  //rando coords
			int midX = (int)Math.floor(Math.random() * this.colLength+1);
			if(this.bShipBoard[midY][midX].equalsIgnoreCase("s") == true || this.bShipBoard[midY][midX].equalsIgnoreCase("m") == true){
				//do nothing, wait for re-loop
			}
			else{
				this.bShipBoard[midY][midX] = "m";
				minecoordsWork =true;
			}
		}
		
	}
	public boolean checkForCollisions(int y, int x, String verticalOrHorizontal){ // returns true if there will be collisions with other ships
		if(verticalOrHorizontal.equalsIgnoreCase("H") == true){//horizontal check
			
			if(this.bShipBoard[y][x+1].equalsIgnoreCase("s") || this.bShipBoard[y][x-1].equalsIgnoreCase("s") ){
				return true;
			}		
		}
		else if(verticalOrHorizontal.equalsIgnoreCase("V") == true){ // vertical check
			if(this.bShipBoard[y+1][x].equalsIgnoreCase("s") || this.bShipBoard[y-1][x].equalsIgnoreCase("s") ){
				return true;
			}
		}
		
			
		return false;
	}	

	public void setupBoard(){ 
		this.setColLength();
		this.setRowLength();
		this.setCorners();
		this.setTopEdge();
		this.setLeftEdge();
		this.setRightEdge();
		this.setBottomEdge();
		for(int i = 1; i<this.rowLength; i++){ //this puts "n"s in every spot that is null in the inner square of the board
			for(int j = 1; j<this.colLength;j++){
				this.bShipBoard[i][j] = "n";
			}
		}
		
		int i =0;
		while(i < this.ships ){  //takes how many ships needed and places that many
			this.placeShip();
			i++;
		}
		
		i=0;
		while(i< this.mines){ //takes how many mines needed and places that many
			this.placeMine();
			i++;
		}
			
	
	}
	public BattleShipBoard(int col, int row){
		this.bShipBoard = new String[col][row];
		
		if(row*col<=16){
			this.ships = 1;
			this.mines = 1;
			
		}
		else if(row*col <= 36){
			this.ships = 2;
			this.mines = 2;
			
		}
		else if(row*col <=100){
			this.ships = 3;
			this.mines = 3;
			
		}
		
		this.setupBoard(); //calls a help function that calls all the pre-req methods for setting up the board correctly
		
	
	}
	public void addHit(){
		this.hits++;
	}
	public int getHits(){
		return this.hits;
	}
	public void addMiss(){
		this.misses++;
	}
	public int getMisses(){
		return this.misses;
	}
	public void addRedundantStrike(){
		this.redundantStrikes ++;
	}
	public int getRedundantStrikes(){
		return this.redundantStrikes;
		
	}
	public int getRowLength(){
		return this.rowLength;
	}
	public int getColLength(){
		return this.colLength;
	}
	
	public void setDebug(String a){  //setting the debug and notifying the user
		if(a.contains("true") == true){
			this.debug = true;
			System.out.println("Test/Debug mode enabled");
			System.out.println("Ships are indicated by 's', and mines are indicated by 'm'");
			System.out.println(Arrays.deepToString(bShipBoard));
		}
		else if (a.contains("false") == true){
			this.debug = false;
			System.out.println("Test/Debug mode disabled");
		}
		
		
	}
	public Boolean getDebug(){
		return this.debug;
	}
	
	public boolean insideBoardCheck(int row, int col){  //checks that coordinates are inside the board
		if( row > this.rowLength || col > this.colLength){
			return false;
		}
		else if ( row < 0 || col < 0){
			return false;
		}
		else{
			return true;
		}
		
	}
	public boolean checkRedundantStrike(int row, int col){ //checking for a redundant strike
		if(this.bShipBoard[row][col].contains("h") == true){
			return true;
		}
		else
			return false;
	}
	public boolean checkIfShipHit(int row,int col){
		if(this.bShipBoard[row][col].equalsIgnoreCase("s")){
			return true;
		}
		else
			return false;
	}
	public boolean checkIfMineHit(int row,int col){ // checks if the coordinates hit a mine
		if(this.bShipBoard[row][col].equalsIgnoreCase("m")){
			return true;
		}
		else
			return false;
	}
	public boolean checkIfVeryClose(int row,int col){ //checking if coordinates are very close to a ship
		if(insideBoardCheck(row-1,col-1) == true){
			if(checkIfShipHit(row-1,col-1) == true){
				return true;
			}		
		}
		else if(insideBoardCheck(row-1,col+1) == true){
			if(checkIfShipHit(row-1,col+1) == true){
				return true;
			}		
		}
		else if(insideBoardCheck(row+1,col-1) == true){
			if(checkIfShipHit(row+1,col-1) == true){
				return true;
			}		
		}
		else if(insideBoardCheck(row+1,col-1) == true){
			if(checkIfShipHit(row+1,col-1) == true){
				return true;
			}		
		}
		
		return false;
	}
	public boolean checkIfClose(int row,int col){  // checking if coordinates are close to a ship
		if(insideBoardCheck(row-2,col-2) == true){
			if(checkIfShipHit(row-2,col-2) == true){
				return true;
			}		
		}
		else if(insideBoardCheck(row-2,col+2) == true){
			if(checkIfShipHit(row-2,col+2) == true){
				return true;
			}		
		}
		else if(insideBoardCheck(row+2,col-2) == true){
			if(checkIfShipHit(row+2,col-2) == true){
				return true;
			}		
		}
		else if(insideBoardCheck(row+2,col-2) == true){
			if(checkIfShipHit(row+2,col-2) == true){
				return true;
			}		
		}
		
		return false;
	}
	public boolean checkIfGameOver(){ //returns false if game is not over, true if game is over
		
		for (int i = 0; i <= this.colLength; i++){
	        for (int j = 0; j <= this.rowLength; j++) {
	        	//System.out.println("This is what the end game is checking" + this.bShipBoard[i][j]);
	        	if(this.bShipBoard[i][j].equalsIgnoreCase("s")  == true){
	        		return false;
	        	}
	        		
	        }
		}
		
		return true;
	}
	public static void main(String[] args){
		int turns = 0;  // turn counter!
		
		boolean gameover = false;
		boolean validBoardSize = false;
		System.out.println("Welcome to battleship!"); // welcome!
		Scanner s = new Scanner(System.in);  // not sure if closing the resource is bad or not
		System.out.println("Please enter the size of the board in whole numbers.  Press enter after the first number is entered");
		int row = s.nextInt();
		int col = s.nextInt();
		
		while(validBoardSize == false){ //checking for valid board size
			if(row*col < 9){
				System.out.println("Invalid board size, board too small");
				System.out.println("Please re-enter the board size");
				row = s.nextInt();
				col = s.nextInt();
			}
			else if(row*col > 100){
				System.out.println("Invalid board size, board too large");
				System.out.println("Please re-enter the board size");
				row = s.nextInt();
				col = s.nextInt();
			}
			else
				validBoardSize = true;
		}
		BattleShipBoard board = new BattleShipBoard(row, col);  // board is initialized  here
		
	
		System.out.println("Test/Debug mode? T/F");  // asking for T or F
		String test = s.next();
		if(test.equalsIgnoreCase("T")){
			board.setDebug("true");
			System.out.println("Let the game begin!");
		}
		else if(test.equalsIgnoreCase("F")){
			board.setDebug("false");
			System.out.println("Let the game begin!");
		}
		else{
			System.out.println("Invalid answer");
		}
		
		// need to tell the user what the top left and bottom right corner coordinates are
		System.out.println("The top left coordinares are going to be 0 0, and the bottom right coordinates are going to be " + (row-1) + " " + (col-1));
		
		while (gameover == false){ // starting the turn loop
			turns++;
			System.out.println("Please enter the next coordinates, press enter after entering the first coordinate: ");
			row = s.nextInt();
			col = s.nextInt();
			while(board.insideBoardCheck(row,col) == false){ //for invalid coords
				System.out.println("Invalid coordinates, please enter new coordinates:");
				row = s.nextInt();
				col = s.nextInt();
			}
			if(board.checkRedundantStrike(row,col) ==true){ //redundant strike
				System.out.println("You already shot there, what a waste of ammunition!  An extra turn has been added");
				turns++;
				board.addRedundantStrike();
				
			}
			else if(board.checkIfShipHit(row,col) == true){ //hitting a ship
				System.out.println("You hit a ship!");
				board.setBShipBoard(row, col, "h");
				board.addHit();
			}
			else if(board.checkIfMineHit(row,col) == true){ //hitting a mine
				System.out.println("You hit a mine!  An extra turn has been added to your score");
				turns++;
				board.setBShipBoard(row, col, "h");
				board.addMiss();
			}
			else{ // missing!
				board.setBShipBoard(row, col, "h");
				System.out.println("You missed");
				board.addMiss();
				if(board.checkIfVeryClose(row,col) == true){ //very close
					System.out.println("But you were very close.");
				}
				else if(board.checkIfClose(row,col) == true){ //just close
					System.out.println("But you were close.");
				}
			}
			
			
			
			if(board.checkIfGameOver() == true){ //checking if the game is over after a strike
				System.out.println("You sunk all the battleships! The game is over!");
				gameover = true;
			}
			else{ //only prints this if the game isn't over
				System.out.println("Your current hits: " + board.getHits());
				System.out.println("Your current misses: "+ board.getMisses() );
				System.out.println("Your current redundant strike count: " + board.getRedundantStrikes());
				System.out.println("Your turn count: " + turns);
			}
			
				
		} //prints the final scores after the game is over
		System.out.println("Your final hit count: " + board.getHits());
		System.out.println("Your final miss count: "+ board.getMisses() );
		System.out.println("Your final redundant strike count: " + board.getRedundantStrikes());
		System.out.println("Your final turn count: " + turns);
		System.out.println("Thanks for playing!");
		
		
		
		}
		
	}

